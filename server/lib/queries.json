{
    "createEvent": "INSERT INTO event (user_id, subject_id, event_name, event_description, event_location_name, event_start_at, event_end_at, event_private) VALUES (?, ?, ?, ?, ?, ?, ?, ?)",
    "createTextPost": "INSERT INTO post (user_id, post_content, post_private) VALUES (?, ?, ?)",
    "getLastInsertedEventId": "SELECT LAST_INSERT_ID() AS event_id",
    "getLastInsertedPostId": "SELECT LAST_INSERT_ID() AS post_id",
    "getSubjectIdByName": "SELECT subject_id FROM subject WHERE subject_name = ?",
    "getUserCredentialsByUsername": "SELECT user_id, password_salt, password_hash FROM user WHERE username = ?",
    "getUserIdByUsername": "SELECT user_id FROM user WHERE username = ?",
    "getUserSuggestionsFromName": "SELECT user_id, username, user_avatar FROM user WHERE username LIKE ?",
    "updateEventImage": "UPDATE event SET event_image = ? WHERE event_id = ?",
    "updateMediaPost": "UPDATE post SET post_url = ? WHERE post_id = ?",
    "getPostsByFollowedUsers": "SELECT CASE WHEN p.event_id IS NOT NULL THEN 'event' WHEN p.post_url IS NOT NULL THEN 'media' ELSE 'text' END AS type, s.subject_name AS subject, p.post_content, p.post_url AS file, e.event_name, e.event_image, e.event_description, e.event_location_name, e.event_start_at, e.event_end_at, e.event_private, p.post_private, u.user_id, u.username, u.user_avatar, p.post_created_at FROM post p JOIN follower f ON p.user_id = f.user_id JOIN user u ON p.user_id = u.user_id LEFT JOIN subject s ON p.subject_id = s.subject_id LEFT JOIN event e ON p.event_id = e.event_id WHERE f.follower_id = ? ORDER BY p.post_created_at DESC",
    "getNewPostsByNonFollowedUsers": "SELECT CASE WHEN p.event_id IS NOT NULL THEN 'event' WHEN p.post_url IS NOT NULL THEN 'media' ELSE 'text' END AS type, s.subject_name AS subject, p.post_content, p.post_url AS file, e.event_name, e.event_image, e.event_description, e.event_location_name, e.event_start_at, e.event_end_at, e.event_private, p.post_private, u.user_id, u.username, u.user_avatar, p.post_created_at FROM post p JOIN user u ON p.user_id = u.user_id LEFT JOIN subject s ON p.subject_id = s.subject_id LEFT JOIN event e ON p.event_id = e.event_id WHERE u.user_id NOT IN (SELECT f.user_id FROM follower f WHERE f.follower_id = ?) ORDER BY p.post_created_at DESC",
    "getSuggestedUsers": "SELECT u.user_id, u.username, u.user_avatar FROM user u WHERE u.user_id != ? AND u.user_id NOT IN (SELECT f.user_id FROM follower f WHERE f.follower_id = ?) ORDER BY u.joined_at DESC LIMIT 10" ,
    "followUser": "INSERT INTO follower (user_id, follower_id) VALUES (?, ?)",
    "unfollowUser": "DELETE FROM follower WHERE user_id = ? AND follower_id = ?",
    "isFollowing": "SELECT 1 FROM follower WHERE user_id = ? AND follower_id = ?",
    "getUserById": "SELECT user_id, username, user_bio, account_type, user_avatar, user_private, joined_at, (SELECT COUNT(*) FROM follower WHERE user_id = ?) AS followers_count FROM user WHERE user_id = ?",
    "getUserPosts": "SELECT CASE WHEN p.event_id IS NOT NULL THEN 'event' WHEN p.post_url IS NOT NULL THEN 'media' ELSE 'text' END AS type, s.subject_name AS subject, p.post_content, p.post_url AS file, p.event_id AS event_id, e.event_name, e.event_image, e.event_description, e.event_location_name, e.event_start_at, e.event_end_at, e.event_private, p.post_private, u.user_id, u.username, u.user_avatar, p.post_created_at FROM post p LEFT JOIN user u ON p.user_id = u.user_id LEFT JOIN subject s ON p.subject_id = s.subject_id LEFT JOIN event e ON p.event_id = e.event_id WHERE p.user_id = ? ORDER BY p.post_created_at DESC",    "userJoinEvent": "INSERT INTO user_event(user_id, event_id) VALUES (?, ?)",
    "getParticipantsCount": "SELECT COUNT(*) AS participants_count FROM user_event WHERE event_id = ?"
}